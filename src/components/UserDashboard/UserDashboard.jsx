import React, { useState } from 'react';
import { useDispatch } from 'react-redux';
import { useUserProfile } from '../../hooks/useDataFetching.js';
import { 
  logoutUser,
  clearAuthData       
} from '../../store/slices/authSlice.js';
import { 
  updateUserProfile,
  changePassword
} from '../../store/slices/userSlice.js';
import { useAuth } from '../../context/AuthContext';
import { cookieUtils } from '../../utils/cookies';
import './UserDashboard.css';

// QR Code Modal Component
const QRCodeModal = ({ isOpen, onClose, qrCodeLink }) => {
  if (!isOpen) return null;

  return (
    <div className="modal-overlay">
      <div className="modal-content qr-modal">
        <div className="modal-header">
          <h3>Profile QR Code</h3>
          <button className="modal-close" onClick={onClose}>Ã—</button>
        </div>
        
        <div className="modal-body">
          <div className="qr-modal-content">
            {qrCodeLink ? (
              <div className="qr-display">
                <img src={qrCodeLink} alt="Profile QR Code" />
                <p>Scan this QR code to view your profile</p>
                <div className="qr-actions">
                  <button 
                    className="btn btn-primary"
                    onClick={() => {
                      const link = document.createElement('a');
                      link.href = qrCodeLink;
                      link.download = 'profile-qr-code.png';
                      link.click();
                    }}
                  >
                    Download QR Code
                  </button>
                </div>
              </div>
            ) : (
              <div className="qr-placeholder">
                <div className="qr-icon">ðŸ“±</div>
                <p>QR Code not available</p>
                <small>QR code will be generated by the backend</small>
              </div>
            )}
          </div>
        </div>

        <div className="modal-footer">
          <button 
            className="btn btn-secondary"
            onClick={onClose}
          >
            Close
          </button>
        </div>
      </div>
    </div>
  );
};

// Password Change Modal Component
const PasswordChangeModal = ({ isOpen, onClose, onSave, loading }) => {
  const [passwordForm, setPasswordForm] = useState({
    currentPassword: '',
    newPassword: '',
    confirmPassword: ''
  });

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setPasswordForm(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleSave = () => {
    onSave(passwordForm);
  };

  const handleCancel = () => {
    setPasswordForm({
      currentPassword: '',
      newPassword: '',
      confirmPassword: ''
    });
    onClose();
  };

  if (!isOpen) return null;

  return (
    <div className="modal-overlay">
      <div className="modal-content">
        <div className="modal-header">
          <h3>Change Password</h3>
          <button className="modal-close" onClick={handleCancel}>Ã—</button>
        </div>
        
        <div className="modal-body">
          <div className="form-group">
            <label htmlFor="currentPassword">Current Password</label>
            <input
              type="password"
              id="currentPassword"
              name="currentPassword"
              value={passwordForm.currentPassword}
              onChange={handleInputChange}
              placeholder="Enter current password"
              className="form-input"
            />
          </div>
          <div className="form-group">
            <label htmlFor="newPassword">New Password</label>
            <input
              type="password"
              id="newPassword"
              name="newPassword"
              value={passwordForm.newPassword}
              onChange={handleInputChange}
              placeholder="Enter new password"
              className="form-input"
            />
          </div>
          <div className="form-group">
            <label htmlFor="confirmPassword">Confirm New Password</label>
            <input
              type="password"
              id="confirmPassword"
              name="confirmPassword"
              value={passwordForm.confirmPassword}
              onChange={handleInputChange}
              placeholder="Confirm new password"
              className="form-input"
            />
          </div>
        </div>

        <div className="modal-footer">
          <button 
            className="btn btn-primary"
            onClick={handleSave}
            disabled={loading}
          >
            {loading ? 'Changing Password...' : 'Change Password'}
          </button>
          <button 
            className="btn btn-secondary"
            onClick={handleCancel}
            disabled={loading}
          >
            Cancel
          </button>
        </div>
      </div>
    </div>
  );
};

// Edit Profile Modal Component
const EditProfileModal = ({ isOpen, onClose, profile, onSave, loading }) => {
  const [editForm, setEditForm] = useState({
    firstName: profile?.firstName || '',
    lastName: profile?.lastName || '',
  });

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setEditForm(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleSave = () => {
    onSave(editForm);
  };

  const handleCancel = () => {
    setEditForm({
      firstName: profile?.firstName || '',
      lastName: profile?.lastName || '',
    });
    onClose();
  };

  if (!isOpen) return null;

  return (
    <div className="modal-overlay">
      <div className="modal-content">
        <div className="modal-header">
          <h3>Edit Profile</h3>
          <button className="modal-close" onClick={handleCancel}>Ã—</button>
        </div>
        
        <div className="modal-body">
          <div className="form-group">
            <label htmlFor="modal-email">Email</label>
            <input
              type="email"
              id="modal-email"
              name="email"
              value={profile?.email || ''}
              disabled
              className="form-input disabled"
            />
            <small className="form-help">Email cannot be changed</small>
          </div>

          <div className="form-group">
            <label htmlFor="modal-firstName">First Name</label>
            <input
              type="text"
              id="modal-firstName"
              name="firstName"
              value={editForm.firstName}
              onChange={handleInputChange}
              placeholder="Enter your first name"
              className="form-input"
            />
          </div>

          <div className="form-group">
            <label htmlFor="modal-lastName">Last Name</label>
            <input
              type="text"
              id="modal-lastName"
              name="lastName"
              value={editForm.lastName}
              onChange={handleInputChange}
              placeholder="Enter your last name"
              className="form-input"
            />
          </div>
        </div>

        <div className="modal-footer">
          <button 
            className="btn btn-primary"
            onClick={handleSave}
            disabled={loading}
          >
            {loading ? 'Saving...' : 'Save Changes'}
          </button>
          <button 
            className="btn btn-secondary"
            onClick={handleCancel}
            disabled={loading}
          >
            Cancel
          </button>
        </div>
      </div>
    </div>
  );
};

const UserDashboard = () => {
  const dispatch = useDispatch();
  const { isAuthenticated: contextIsAuthenticated, logout } = useAuth(); // Use Context authentication
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);
  const [isQRModalOpen, setIsQRModalOpen] = useState(false);
  const [isPasswordModalOpen, setIsPasswordModalOpen] = useState(false);
  const [updateLoading, setUpdateLoading] = useState(false);
  
  // Use custom hooks for data fetching with caching
  const { profile, loading: profileLoading, error: profileError, refetch: refetchProfile } = useUserProfile();

  // Debug information
  const debugInfo = {
    contextIsAuthenticated,
    cookieToken: !!cookieUtils.getAuthToken(),
    cookieUserData: !!cookieUtils.getUserData(),
    profileData: !!profile
  };

  const handleLogout = async () => {
    try {
      await dispatch(logoutUser()).unwrap();
      // Clear all cached data on logout
      dispatch(clearAuthData());
      // Also call context logout
      logout();
    } catch (error) {

      // Fallback to context logout
      logout();
    }
  };

  const handleRefreshData = () => {
    // Force refresh profile data
    refetchProfile();
  };

  const handleEditProfile = () => {
    setIsEditModalOpen(true);
  };

  const handleShowQRCode = () => {
    setIsQRModalOpen(true);
  };

  const handleChangePassword = () => {
    setIsPasswordModalOpen(true);
  };

  const handleSaveProfile = async (editForm) => {
    try {
      setUpdateLoading(true);
      
      // Validate form
      if (!editForm.firstName.trim()) {
        alert('First name is required');
        return;
      }

      // Update profile name
      if (editForm.firstName !== profile?.firstName || editForm.lastName !== profile?.lastName) {
        await dispatch(updateUserProfile({
          firstName: editForm.firstName,
          lastName: editForm.lastName
        })).unwrap();
      }

      alert('Profile updated successfully!');
      setIsEditModalOpen(false);
      refetchProfile(); // Refresh data
    } catch (error) {
      alert('Failed to update profile: ' + (error.message || error));
    } finally {
      setUpdateLoading(false);
    }
  };

  const handleSavePassword = async (passwordForm) => {
    try {
      setUpdateLoading(true);
      
      // Validate password form
      if (!passwordForm.currentPassword || !passwordForm.newPassword || !passwordForm.confirmPassword) {
        alert('All password fields are required');
        return;
      }
      if (passwordForm.newPassword !== passwordForm.confirmPassword) {
        alert('New passwords do not match');
        return;
      }
      if (passwordForm.newPassword.length < 6) {
        alert('New password must be at least 6 characters');
        return;
      }

      // Change password
      await dispatch(changePassword({
        currentPassword: passwordForm.currentPassword,
        newPassword: passwordForm.newPassword
      })).unwrap();

      alert('Password changed successfully!');
      setIsPasswordModalOpen(false);
    } catch (error) {
      alert('Failed to change password: ' + (error.message || error));
    } finally {
      setUpdateLoading(false);
    }
  };

  // Helper function to get full name
  const getFullName = () => {
    if (!profile) return 'User';
    const firstName = profile.firstName || '';
    const lastName = profile.lastName || '';
    return `${firstName} ${lastName}`.trim() || 'User';
  };

  // Use context authentication for the main check
  const isAuthenticated = contextIsAuthenticated;

  if (!isAuthenticated) {
    return (
      <div className="user-dashboard">
        <div className="dashboard-container">
          <h2>Please log in to view your profile</h2>
          
          {/* Debug Information */}
          <div className="debug-info" style={{ 
            background: '#f5f5f5', 
            padding: '15px', 
            margin: '20px 0', 
            borderRadius: '5px',
            fontSize: '12px'
          }}>
            <h4>Debug Information:</h4>
            <pre>{JSON.stringify(debugInfo, null, 2)}</pre>
            <p>Current URL: {window.location.pathname}</p>
            <p>Expected URL: /profile</p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="user-dashboard">
      <div className="dashboard-container">
        <div className="dashboard-header">
          <h1>User Profile</h1>
          <div className="dashboard-actions">
            <button 
              className="btn btn-secondary"
              onClick={handleRefreshData}
              disabled={profileLoading}
            >
              {profileLoading ? 'Refreshing...' : 'Refresh Data'}
            </button>
            <button 
              className="btn btn-danger"
              onClick={handleLogout}
            >
              Logout
            </button>
          </div>
        </div>

        <div className="dashboard-content">
          {/* Profile Section */}
          <div className="dashboard-section">
            <div className="section-header">
              <h2>Profile Information</h2>
              <div className="profile-actions">
                <button 
                  className="btn btn-primary"
                  onClick={handleEditProfile}
                >
                  Edit Profile
                </button>
                <button 
                  className="btn btn-outline"
                  onClick={handleChangePassword}
                >
                  Change Password
                </button>
              </div>
            </div>
            
            {profileLoading ? (
              <div className="loading">Loading profile...</div>
            ) : profileError ? (
              <div className="error">
                Error loading profile: {profileError}
                <button onClick={refetchProfile}>Retry</button>
              </div>
            ) : profile ? (
              <div className="profile-container">
                {/* Profile Details - Left Side */}
                <div className="profile-details">
                  <div className="profile-info">
                    <h3>{getFullName()}</h3>
                    <p><strong>Email:</strong> {profile.email}</p>
                    {profile.firstName && <p><strong>First Name:</strong> {profile.firstName}</p>}
                    {profile.lastName && <p><strong>Last Name:</strong> {profile.lastName}</p>}
                  </div>
                </div>

                {/* Profile Photo/QR Code Section - Right Side */}
                <div className="profile-photo-section">
                  <div className="profile-photo">
                    {profile.qrCodeLink ? (
                      <img src={profile.qrCodeLink} alt="Profile QR Code" />
                    ) : (
                      <div className="qr-placeholder">
                        <div className="qr-icon">ðŸ“±</div>
                        <p>QR Code</p>
                        <small>Will be fetched from backend</small>
                      </div>
                    )}
                  </div>
                  <div className="photo-info">
                    <h4>Profile QR Code</h4>
                    <p>Scan this QR code to view your profile</p>
                    {profile.qrCodeLink && (
                      <div className="profile-link">
                        <button 
                          className="btn btn-primary"
                          onClick={handleShowQRCode}
                        >
                          Show QR Code
                        </button>
                      </div>
                    )}
                  </div>
                </div>
              </div>
            ) : (
              <div className="no-data">No profile data available</div>
            )}
          </div>

          {/* Cache Status Information */}
          <div className="dashboard-section">
            <h2>Data Status</h2>
            <div className="cache-status">
              <div className="status-item">
                <span className="status-label">Profile Data:</span>
                <span className={`status-indicator ${profile ? 'fresh' : 'stale'}`}>
                  {profile ? 'Cached' : 'Not Available'}
                </span>
              </div>
              <div className="cache-info">
                <p>
                  <small>
                    Data is cached for 5 minutes to reduce API calls. 
                    Click "Refresh Data" to fetch fresh data from the server.
                  </small>
                </p>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Edit Profile Modal */}
      <EditProfileModal
        isOpen={isEditModalOpen}
        onClose={() => setIsEditModalOpen(false)}
        profile={profile}
        onSave={handleSaveProfile}
        loading={updateLoading}
      />

      {/* QR Code Modal */}
      <QRCodeModal
        isOpen={isQRModalOpen}
        onClose={() => setIsQRModalOpen(false)}
        qrCodeLink={profile?.qrCodeLink}
      />

      {/* Password Change Modal */}
      <PasswordChangeModal
        isOpen={isPasswordModalOpen}
        onClose={() => setIsPasswordModalOpen(false)}
        onSave={handleSavePassword}
        loading={updateLoading}
      />
    </div>
  );
};

export default UserDashboard;  